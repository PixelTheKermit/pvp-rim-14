using System.Linq;
using Content.Client.Maps;
using Content.Client.UserInterface;
using Robust.Client.AutoGenerated;
using Content.Client.GameTicking.Managers;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Console;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.LateJoin;

[GenerateTypedNameReferences]
public sealed partial class NewVesselGui : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IConsoleHost _consoleHost = default!;
    [Dependency] private readonly IResourceCache _resourceManager = default!;

    public NewVesselGui()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        foreach (var map in _prototypeManager.EnumeratePrototypes<GameMapPrototype>())
        {
            if (!map.Votable)
                continue;

            ShuttleList.Add(new ItemList.Item(ShuttleList)
            {
                Text = map.MapName,
                Metadata = map
            });
        }

        VesselDescription.SetMessage("Select a vessel.");

        ShuttleList.OnItemSelected += ShuttleListOnOnItemSelected;
        PurchaseShipButton.OnPressed += PurchaseShipButtonOnOnPressed;
    }

    private void PurchaseShipButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        _consoleHost.ExecuteCommand($"purchaseship {((GameMapPrototype) ShuttleList.GetSelected().First().Metadata!).ID}");
        Close();
    }

    private void ShuttleListOnOnItemSelected(ItemList.ItemListSelectedEventArgs obj)
    {
        PurchaseShipButton.Disabled = false;
        var map = (GameMapPrototype)ShuttleList.GetSelected().FirstOrDefault()!.Metadata!;
        if (map.DescriptionPath is not null)
            VesselDescription.SetMessage(FormattedMessage.FromMarkup(_resourceManager.ContentFileReadAllText(map.DescriptionPath)));
        else
            VesselDescription.SetMessage("No description...");
    }
}
